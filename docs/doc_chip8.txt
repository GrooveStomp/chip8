//! \page chip8 About the CHIP-8 System
//!
//! Offline information about the CHIP-8 system.
//! Generally important information used for implementing the emulator.
//!
//! Credit to Wikipedia
//!
//! \tableofcontents
//!
//! \section memory Memory
//! The CHIP-8 has 4k of memory (4096 bytes) where each byte is 8-bits.
//! Programs loaded into memory start at 0x200 or 512 (dec).
//!
//! \section registers Registers
//! The CHIP-8 has 16 8-bit registers named V0 through VF. VF is a special
//! register used as a flag in some instructions.
//!
//! \section stack Stack
//! The stack is used to return addresses when subroutines are called.
//!
//! \section timers Timers
//! There are two timers in the CHIP-8, each of which counts down at 60hz until
//! they reach zero.
//!
//! - Delay Timer: General purpose timer can be both set and read.
//! - Sound Timer: Can be set only, when it reaches zero a beeping sound is made.
//!
//! \section input Input
//! The CHIP-8 has a hex keyboard containing 16 keys ranging from 0 to F.
//!
//! \section graphics_and_sound Graphics and Sound
//! The CHIP-8 has a monochrome display of 64 pixels wide by 32 pixels tall.
//! Graphics are drawn with sprites, which are 8 pixels wide and anywhere from
//! 1 to 15 pixels high.  Sprite pixels are XOR'd with corresponding screen pixels.
//!
//! Sound is a beep that plays when the sound timer reaches zero.
//! There don't seem to be many details about what the sound played should be,
//! so this emulator plays A4 (440hz) for 200 milliseconds.
//!
//! \section opcodes Opcodes
//! There are 35 opcodes, all of which are big-endian 16-bit values.
//!
//! Opcodes use this terminology:
//! - NNN: Address
//! - NN: 8-bit constant
//! - N: 4-bit constant
//! - X and Y: 4-bit register identifier
//! - PC: Program Counter
//! - I: 16-bit register for memory indexing
//! - VN: One of the 16 system registers, 0-F.
//!
//! |Opcode 	|Type 	|C Pseudo 	|Explanation|
//! |---------|-------|-----------|-----------|
//! |0NNN 	|Call 		||Calls RCA 1802 program at address NNN. Not necessary for most ROMs.|
//! |00E0 	|Display 	|disp_clear()| 	Clears the screen.|
//! |00EE 	|Flow 	|return; 	|Returns from a subroutine.|
//! |1NNN 	|Flow 	|goto NNN; 	|Jumps to address NNN.|
//! |2NNN 	|Flow 	|*(0xNNN)() 	|Calls subroutine at NNN.|
//! |3XNN 	|Cond 	|if(Vx==NN) 	|Skips the next instruction if VX equals NN. (Usually the next instruction is a jump to skip a code block)|
//! |4XNN 	|Cond 	|if(Vx!=NN) 	|Skips the next instruction if VX doesn't equal NN. (Usually the next instruction is a jump to skip a code block)|
//! |5XY0 	|Cond 	|if(Vx==Vy) 	|Skips the next instruction if VX equals VY. (Usually the next instruction is a jump to skip a code block)|
//! |6XNN 	|Const 	|Vx = NN 	|Sets VX to NN.|
//! |7XNN 	|Const 	|Vx += NN 	|Adds NN to VX. (Carry flag is not changed)|
//! |8XY0 	|Assign 	|Vx=Vy 	|Sets VX to the value of VY.|
//! |8XY1 	|BitOp 	|Vx=Vx&#123;Vy 	|Sets VX to VX or VY. (Bitwise OR operation)|
//! |8XY2 	|BitOp 	|Vx=Vx&Vy 	|Sets VX to VX and VY. (Bitwise AND operation)|
//! |8XY3 	|BitOp 	|Vx=Vx^Vy 	|Sets VX to VX xor VY.|
//! |8XY4 	|Math 	|Vx += Vy 	|Adds VY to VX. VF is set to 1 when there's a carry, and to 0 when there isn't.|
//! |8XY5 	|Math 	|Vx -= Vy 	|VY is subtracted from VX. VF is set to 0 when there's a borrow, and 1 when there isn't.|
//! |8XY6 	|BitOp 	|Vx>>=1 	|Stores the least significant bit of VX in VF and then shifts VX to the right by 1.[2]|
//! |8XY7 	|Math 	|Vx=Vy-Vx 	|Sets VX to VY minus VX. VF is set to 0 when there's a borrow, and 1 when there isn't.|
//! |8XYE 	|BitOp 	|Vx<<=1 	|Stores the most significant bit of VX in VF and then shifts VX to the left by 1.[3]|
//! |9XY0 	|Cond 	|if(Vx!=Vy) 	|Skips the next instruction if VX doesn't equal VY. (Usually the next instruction is a jump to skip a code block)|
//! |ANNN 	|MEM 	|I = NNN 	|Sets I to the address NNN.|
//! |BNNN 	|Flow 	|PC=V0+NNN 	|Jumps to the address NNN plus V0.|
//! |CXNN 	|Rand 	|Vx=rand()&NN 	|Sets VX to the result of a bitwise and operation on a random number (Typically: 0 to 255) and NN.|
//! |DXYN 	|Disp 	|draw(Vx,Vy,N) 	|Draws a sprite at coordinate (VX, VY) that has a width of 8 pixels and a height of N pixels. Each row of 8 pixels is read as bit-coded starting from memory location I; I value doesn’t change after the execution of this instruction. As described above, VF is set to 1 if any screen pixels are flipped from set to unset when the sprite is drawn, and to 0 if that doesn’t happen|
//! |EX9E 	|KeyOp 	|if(key()==Vx) 	|Skips the next instruction if the key stored in VX is pressed. (Usually the next instruction is a jump to skip a code block)|
//! |EXA1 	|KeyOp 	|if(key()!=Vx) 	|Skips the next instruction if the key stored in VX isn't pressed. (Usually the next instruction is a jump to skip a code block)|
//! |FX07 	|Timer 	|Vx = get_delay() 	|Sets VX to the value of the delay timer.|
//! |FX0A 	|KeyOp 	|Vx = get_key() 	|A key press is awaited, and then stored in VX. (Blocking Operation. All instruction halted until next key event)|
//! |FX15 	|Timer 	|delay_timer(Vx) 	|Sets the delay timer to VX.|
//! |FX18 	|Sound 	|sound_timer(Vx) 	|Sets the sound timer to VX.|
//! |FX1E 	|MEM 	|I +=Vx 	|Adds VX to I.[4]|
//! |FX29 	|MEM 	|I=sprite_addr[Vx] 	|Sets I to the location of the sprite for the character in VX. Characters 0-F (in hexadecimal) are represented by a 4x5 font.|
//! |FX33 	|BCD 	|set_BCD(Vx);<br/>*(I+0)=BCD(3);<br/>*(I+1)=BCD(2);<br/>*(I+2)=BCD(1);|	Stores the binary-coded decimal representation of VX, with the most significant of three digits at the address in I, the middle digit at I plus 1, and the least significant digit at I plus 2. (In other words, take the decimal representation of VX, place the hundreds digit in memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.)<br/>FX55 	MEM 	reg_dump(Vx,&I) 	Stores V0 to VX (including VX) in memory starting at address I. The offset from I is increased by 1 for each value written, but I itself is left unmodified.<br/>FX65 	MEM 	reg_load(Vx,&I) 	Fills V0 to VX (including VX) with values from memory starting at address I. The offset from I is increased by 1 for each value written, but I itself is left unmodified.|
