//! \page chip8
//!
//! Offline information about the CHIP-8 system.
//! Generally important information used for implementing the emulator.
//!
//! Credit to Wikipedia
//!
//! \tableofcontents
//!
//! \section memory Memory
//! The CHIP-8 has 4k of memory (4096 bytes) where each byte is 8-bits.
//! Programs loaded into memory start at 0x200 or 512 (dec).
//!
//! \section registers Registers
//! The CHIP-8 has 16 8-bit registers named V0 through VF. VF is a special
//! register used as a flag in some instructions.
//!
//! \section stack Stack
//! The stack is used to return addresses when subroutines are called.
//!
//! \section timers Timers
//! There are two timers in the CHIP-8, each of which counts down at 60hz until
//! they reach zero.
//!
//! - Delay Timer: General purpose timer can be both set and read.
//! - Sound Timer: Can be set only, when it reaches zero a beeping sound is made.
//!
//! \section input Input
//! The CHIP-8 has a hex keyboard containing 16 keys ranging from 0 to F.
//!
//! \section graphics_and_sound Graphics and Sound
//! The CHIP-8 has a monochrome display of 64 pixels wide by 32 pixels tall.
//! Graphics are drawn with sprites, which are 8 pixels wide and anywhere from
//! 1 to 15 pixels high.  Sprite pixels are XOR'd with corresponding screen pixels.
//!
//! Sound is a beep that plays when the sound timer reaches zero.
//! There don't seem to be many details about what the sound played should be,
//! so this emulator plays A4 (440hz) for 200 milliseconds.
//!
//! \section opcodes Opcodes
//! There are 35 opcodes, all of which are big-endian 16-bit values.
//!
//! Opcodes use this terminology:
//! - NNN: Address
//! - NN: 8-bit constant
//! - N: 4-bit constant
//! - X and Y: 4-bit register identifier
//! - PC: Program Counter
//! - I: 16-bit register for memory indexing
//! - VN: One of the 16 system registers, 0-F.
//! (Table coming soon)
//!
